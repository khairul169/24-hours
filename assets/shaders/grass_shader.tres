[gd_resource type="Shader" format=2]

[resource]

code = "shader_type spatial;
render_mode cull_back;

uniform vec4 albedo: hint_color;
uniform sampler2D albedo_texture: hint_albedo;
uniform float alpha_scissor_threshold;
uniform vec4 transmission: hint_color;
uniform float wave_amplitudo = 0.1;

void vertex() {
	vec3 worldpos = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	VERTEX.x = VERTEX.x + (sin(TIME + worldpos.x + worldpos.z) * VERTEX.y * wave_amplitudo);
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],WORLD_MATRIX[1],vec4(normalize(cross(CAMERA_MATRIX[0].xyz,WORLD_MATRIX[1].xyz)),0.0),WORLD_MATRIX[3]);
}

void fragment() {
	vec4 albedo_tex = texture(albedo_texture, UV) * albedo;
	ALBEDO = albedo_tex.rgb;
	METALLIC = 0.0;
	ROUGHNESS = 1.0;
	SPECULAR = 0.0;
	ALPHA = albedo_tex.a;
	ALPHA_SCISSOR = alpha_scissor_threshold;
	TRANSMISSION = transmission.rgb;
}
"

